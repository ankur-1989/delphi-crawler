/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package de.upb.cs.swt.delphi.crawler.io.swagger.client.api

import de.upb.cs.swt.delphi.crawler.io.swagger.client.model.Instance
import de.upb.cs.swt.delphi.crawler.io.swagger.client.model.InstanceID
import de.upb.cs.swt.delphi.crawler.io.swagger.client.core._
import de.upb.cs.swt.delphi.crawler.io.swagger.client.core.CollectionFormats._
import de.upb.cs.swt.delphi.crawler.io.swagger.client.core.ApiKeyLocations._

object InstanceApi {

  /**
   * Register New Instances
   * 
   * Expected answers:
   *   code 200 :  (Registeration Successful)
   *   code 405 :  (Invalid input)
   * 
   * @param registering Data to Register Instance
   */
  def addInstance(registering: Instance, basePath: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, basePath, "/register", "application/json")
      .withBody(registering)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](405)
        /**
   * Delete an Instance
   * 
   * Expected answers:
   *   code 200 :  (Sucessfully Deregistered)
   *   code 400 :  (Invalid Status Value)
   *   code 404 :  (Instance not found)
   *   code 405 :  (Validation exception)
   * 
   * @param instance Details of Instance to be deleted
   */
  def deleteInstance(instance: InstanceID): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost:8085", "/deregister", "application/json")
      .withBody(instance)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
      .withErrorResponse[Unit](405)
        /**
   * Fetch Specific Instance
   * 
   * Expected answers:
   *   code 200 : Seq[Instance] (successful operation)
   *   code 400 :  (Invalid value)
   * 
   * @param componentType 
   */
  def fetchInstance(componentType: String): ApiRequest[Seq[Instance]] =
    ApiRequest[Seq[Instance]](ApiMethods.GET, "https://localhost:8085", "/instances", "application/json")
      .withQueryParam("ComponentType", componentType)
      .withSuccessResponse[Seq[Instance]](200)
      .withErrorResponse[Unit](400)
        /**
   * How many instances per type are running
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Instances not found)
   * 
   * @param componentType 
   */
  def getInstanceNumber(componentType: String): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.GET, "https://localhost:8085", "/numberOfInstances", "application/json")
      .withQueryParam("ComponentType", componentType)
      .withSuccessResponse[Int](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
        /**
   * Match the instance
   * 
   * Expected answers:
   *   code 200 :  (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (No match found)
   * 
   * @param matchingSuccessful Boolean to indicate if matching is successful
   * @param component Registering Instance
   */
  def getMatchingInstance(matchingSuccessful: Boolean, component: Instance): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://localhost:8085", "/matchingResult", "application/json")
      .withBody(component)
      .withQueryParam("MatchingSuccessful", matchingSuccessful)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 :  ()
   *   code 400 :  (Invalid status value)
   * 
   * @param componentType Component to be fetched
   */
  def matchInstance(componentType: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "https://localhost:8085", "/matchingInstance", "application/json")
      .withQueryParam("ComponentType", componentType)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](400)
      

}

